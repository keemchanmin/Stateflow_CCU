var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"TAXI/Vehicle_State","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"Vehicle_State0.h\"            /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n    static bool OverrunFlag = false;\r\n\r\n    /* Disable interrupts here */\r\n\r\n    /* Check for overrun */\r\n    if (OverrunFlag)\r\n    {\r\n        rtmSetErrorStatus(rtM, \"Overrun\");\r\n        return;\r\n    }\r\n\r\n    OverrunFlag = true;\r\n\r\n    /* Save FPU context here (if necessary) */\r\n    /* Re-enable timer or interrupt here */\r\n    /* Set model inputs here */\r\n\r\n    /* Step the model */\r\n    Vehicle_State0_step();\r\n\r\n    /* Get model outputs here */\r\n\r\n    /* Indicate task complete */\r\n    OverrunFlag = false;\r\n\r\n    /* Disable interrupts here */\r\n    /* Restore FPU context here (if necessary) */\r\n    /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint main(int argc, const char *argv[])\r\n{\r\n    /* Unused arguments */\r\n    (void)(argc);\r\n    (void)(argv);\r\n\r\n    /* Initialize model */\r\n    Vehicle_State0_initialize();\r\n\r\n    /* Attach rt_OneStep to a timer or interrupt service routine with\r\n     * period 0.01 seconds (base rate of the model) here.\r\n     * The call syntax for rt_OneStep is\r\n     *\r\n     *  rt_OneStep();\r\n     */\r\n    printf(\"Warning: The simulation will run forever. \"\r\n           \"Generated ERT main won't simulate model step behavior. \"\r\n           \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n    fflush((NULL));\r\n    while (rtmGetErrorStatus(rtM) == (NULL))\r\n    {\r\n        /*  Perform application tasks here */\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Vehicle_State0.c","type":"source","group":"model","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: Vehicle_State0.c\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Vehicle_State0.h\"\r\n#include \"Vehicle_State_Controller.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\n\r\n/* Model step function */\r\nvoid Vehicle_State0_step(void)\r\n{\r\n    /* Chart: '<Root>/Vehicle_State' incorporates:\r\n     *  Inport: '<Root>/f_distance'\r\n     *  Inport: '<Root>/isArrived'\r\n     *  Inport: '<Root>/isCloseComplete'\r\n     *  Inport: '<Root>/isOpenComplete'\r\n     *  Inport: '<Root>/isStart'\r\n     *  Inport: '<Root>/left_speed'\r\n     *  Inport: '<Root>/operation'\r\n     *  Inport: '<Root>/operationDoorState'\r\n     *  Inport: '<Root>/r_distance'\r\n     *  Inport: '<Root>/right_speed'\r\n     *  Outport: '<Root>/door_state'\r\n     *  Outport: '<Root>/gear_state'\r\n     *  Outport: '<Root>/isEnd'\r\n     *  Outport: '<Root>/obstacle_detected'\r\n     *  Outport: '<Root>/vehicle_state'\r\n     */\r\n    State_Control(rtU.isStart, rtU.isArrived, rtU.operation, rtU.left_speed,\r\n                  rtU.right_speed, rtU.r_distance, rtU.f_distance,\r\n                  rtU.operationDoorState, rtU.isOpenComplete,\r\n                  rtU.isCloseComplete, &rtY.isEnd, &rtY.vehicle_state,\r\n                  &rtY.gear_state, &rtY.obstacle_detected, &rtY.door_state,\r\n                  &rtDW.sf_Vehicle_State);\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Vehicle_State0_initialize(void)\r\n{\r\n    /* SystemInitialize for Chart: '<Root>/Vehicle_State' incorporates:\r\n     *  Outport: '<Root>/door_state'\r\n     *  Outport: '<Root>/gear_state'\r\n     *  Outport: '<Root>/isEnd'\r\n     *  Outport: '<Root>/obstacle_detected'\r\n     *  Outport: '<Root>/vehicle_state'\r\n     */\r\n    State_Control_Init(&rtY.isEnd, &rtY.vehicle_state, &rtY.gear_state,\r\n                       &rtY.obstacle_detected, &rtY.door_state);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Vehicle_State0.h","type":"header","group":"model","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: Vehicle_State0.h\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Vehicle_State0_h_\r\n#define Vehicle_State0_h_\r\n#ifndef Vehicle_State0_COMMON_INCLUDES_\r\n#define Vehicle_State0_COMMON_INCLUDES_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#include \"math.h\"\r\n#endif                                 /* Vehicle_State0_COMMON_INCLUDES_ */\r\n\r\n#include \"Vehicle_State0_types.h\"\r\n#include \"Vehicle_State_Controller.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct\r\n{\r\n    DW_State_Control sf_Vehicle_State; /* '<Root>/Vehicle_State' */\r\n}\r\nDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct\r\n{\r\n    bool isStart;                      /* '<Root>/isStart' */\r\n    bool isArrived;                    /* '<Root>/isArrived' */\r\n    OperationMode operation;           /* '<Root>/operation' */\r\n    uint16_t left_speed;               /* '<Root>/left_speed' */\r\n    uint16_t right_speed;              /* '<Root>/right_speed' */\r\n    uint32_t r_distance;               /* '<Root>/r_distance' */\r\n    uint32_t f_distance;               /* '<Root>/f_distance' */\r\n    OperationDoorState operationDoorState;/* '<Root>/operationDoorState' */\r\n    bool isOpenComplete;               /* '<Root>/isOpenComplete' */\r\n    bool isCloseComplete;              /* '<Root>/isCloseComplete' */\r\n}\r\nExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct\r\n{\r\n    bool isEnd;                        /* '<Root>/isEnd' */\r\n    Vehicle_State vehicle_state;       /* '<Root>/vehicle_state' */\r\n    Gear_State gear_state;             /* '<Root>/gear_state' */\r\n    bool obstacle_detected;            /* '<Root>/obstacle_detected' */\r\n    Door_State door_state;             /* '<Root>/door_state' */\r\n}\r\nExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM\r\n{\r\n    const char * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void Vehicle_State0_initialize(void);\r\nextern void Vehicle_State0_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('TAXI/Vehicle_State')    - opens subsystem TAXI/Vehicle_State\r\n * hilite_system('TAXI/Vehicle_State/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'TAXI'\r\n * '<S1>'   : 'TAXI/Vehicle_State'\r\n */\r\n#endif                                 /* Vehicle_State0_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Vehicle_State0_private.h","type":"header","group":"model","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: Vehicle_State0_private.h\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Vehicle_State0_private_h_\r\n#define Vehicle_State0_private_h_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#include \"Vehicle_State0_types.h\"\r\n#endif                                 /* Vehicle_State0_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Vehicle_State0_types.h","type":"header","group":"model","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: Vehicle_State0_types.h\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Vehicle_State0_types_h_\r\n#define Vehicle_State0_types_h_\r\n#include <stdint.h>\r\n#ifndef DEFINED_TYPEDEF_FOR_OperationMode_\r\n#define DEFINED_TYPEDEF_FOR_OperationMode_\r\n\r\ntypedef enum\r\n{\r\n    PARKING = 0,                       /* Default value */\r\n    DRIVING,\r\n    REVERSE,\r\n    BRKING\r\n}\r\nOperationMode;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_OperationDoorState_\r\n#define DEFINED_TYPEDEF_FOR_OperationDoorState_\r\n\r\ntypedef enum\r\n{\r\n    CLOSE = 0,                         /* Default value */\r\n    OPEN\r\n}\r\nOperationDoorState;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_Vehicle_State_\r\n#define DEFINED_TYPEDEF_FOR_Vehicle_State_\r\n\r\ntypedef enum\r\n{\r\n    IDLE = 0,                          /* Default value */\r\n    WORK\r\n}\r\nVehicle_State;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_Gear_State_\r\n#define DEFINED_TYPEDEF_FOR_Gear_State_\r\n\r\ntypedef enum\r\n{\r\n    P = 0,                             /* Default value */\r\n    D,\r\n    R,\r\n    B\r\n}\r\nGear_State;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_Door_State_\r\n#define DEFINED_TYPEDEF_FOR_Door_State_\r\n\r\ntypedef enum\r\n{\r\n    CLOSED = 0,                        /* Default value */\r\n    OPENED\r\n}\r\nDoor_State;\r\n\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n#endif                                 /* Vehicle_State0_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Vehicle_State_Controller.c","type":"source","group":"subsystem","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: Vehicle_State_Controller.c\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stdbool.h>\r\n#include \"Vehicle_State0_types.h\"\r\n#include <stdint.h>\r\n#include \"Vehicle_State_Controller.h\"\r\n\r\n/* Named constants for Chart: '<Root>/Vehicle_State' */\r\n#define IN_BRAKE                       ((uint8_t)1U)\r\n#define IN_DOOR_CLOSE                  ((uint8_t)1U)\r\n#define IN_DOOR_IDLE                   ((uint8_t)2U)\r\n#define IN_DOOR_OPEN                   ((uint8_t)3U)\r\n#define IN_DRIVING                     ((uint8_t)2U)\r\n#define IN_IDLE                        ((uint8_t)1U)\r\n#define IN_NO_ACTIVE_CHILD             ((uint8_t)0U)\r\n#define IN_OBSTACLE_DETECTED           ((uint8_t)3U)\r\n#define IN_PARKING                     ((uint8_t)4U)\r\n#define IN_REVERSE                     ((uint8_t)5U)\r\n#define IN_WORK                        ((uint8_t)2U)\r\n\r\n/* System initialize for atomic system: '<Root>/Vehicle_State' */\r\nvoid State_Control_Init(bool *rty_isEnd, Vehicle_State *rty_vehicle_state,\r\n                        Gear_State *rty_gear_state, bool *rty_obstacle_detected,\r\n                        Door_State *rty_door_state)\r\n{\r\n    *rty_isEnd = false;\r\n    *rty_vehicle_state = IDLE;\r\n    *rty_gear_state = P;\r\n    *rty_obstacle_detected = false;\r\n    *rty_door_state = CLOSED;\r\n}\r\n\r\n/* Output and update for atomic system: '<Root>/Vehicle_State' */\r\nvoid State_Control(bool rtu_isStart, bool rtu_isArrived, OperationMode\r\n                   rtu_operation, uint16_t rtu_left_speed, uint16_t\r\n                   rtu_right_speed, uint32_t rtu_r_distance, uint32_t\r\n                   rtu_f_distance, OperationDoorState rtu_operationDoorState,\r\n                   bool rtu_isOpenComplete, bool rtu_isCloseComplete, bool\r\n                   *rty_isEnd, Vehicle_State *rty_vehicle_state, Gear_State\r\n                   *rty_gear_state, bool *rty_obstacle_detected, Door_State\r\n                   *rty_door_state, DW_State_Control *localDW)\r\n{\r\n    /* Chart: '<Root>/Vehicle_State' */\r\n    if (localDW->is_active_c2_Vehicle_State0 == 0)\r\n    {\r\n        localDW->is_active_c2_Vehicle_State0 = 1U;\r\n        localDW->is_c2_Vehicle_State0 = IN_IDLE;\r\n        *rty_isEnd = false;\r\n        *rty_vehicle_state = IDLE;\r\n    }\r\n    else if (localDW->is_c2_Vehicle_State0 == IN_IDLE)\r\n    {\r\n        *rty_vehicle_state = IDLE;\r\n        if (rtu_isStart)\r\n        {\r\n            localDW->is_c2_Vehicle_State0 = IN_WORK;\r\n            *rty_vehicle_state = WORK;\r\n            localDW->is_GEAR = IN_PARKING;\r\n            *rty_obstacle_detected = false;\r\n            *rty_gear_state = P;\r\n            localDW->is_DOOR = IN_DOOR_IDLE;\r\n            *rty_door_state = CLOSED;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        /* case IN_WORK: */\r\n        *rty_vehicle_state = WORK;\r\n        if (*rty_isEnd)\r\n        {\r\n            localDW->is_DOOR = IN_NO_ACTIVE_CHILD;\r\n            localDW->is_GEAR = IN_NO_ACTIVE_CHILD;\r\n            localDW->is_c2_Vehicle_State0 = IN_IDLE;\r\n            *rty_isEnd = false;\r\n            *rty_vehicle_state = IDLE;\r\n        }\r\n        else\r\n        {\r\n            switch (localDW->is_GEAR)\r\n            {\r\n              case IN_BRAKE:\r\n                *rty_gear_state = B;\r\n                if ((rtu_operation == PARKING) && ((rtu_left_speed == 0) &&\r\n                        (rtu_right_speed == 0)))\r\n                {\r\n                    localDW->is_GEAR = IN_PARKING;\r\n                    *rty_obstacle_detected = false;\r\n                    *rty_gear_state = P;\r\n                }\r\n                else if ((rtu_f_distance < 10U) || (rtu_r_distance < 10U))\r\n                {\r\n                    localDW->is_GEAR = IN_OBSTACLE_DETECTED;\r\n                    *rty_obstacle_detected = true;\r\n                }\r\n                break;\r\n\r\n              case IN_DRIVING:\r\n                *rty_gear_state = D;\r\n                if (rtu_operation == BRKING)\r\n                {\r\n                    localDW->is_GEAR = IN_BRAKE;\r\n                    *rty_gear_state = B;\r\n                }\r\n                else if ((rtu_f_distance <= 100U) && (rtu_f_distance > 10U))\r\n                {\r\n                    localDW->is_GEAR = IN_OBSTACLE_DETECTED;\r\n                    *rty_obstacle_detected = true;\r\n                }\r\n                break;\r\n\r\n              case IN_OBSTACLE_DETECTED:\r\n                *rty_obstacle_detected = true;\r\n                if ((rtu_f_distance > 100U) && (rtu_r_distance > 100U) &&\r\n                        ((rtu_left_speed == 0) && (rtu_right_speed == 0)))\r\n                {\r\n                    localDW->is_GEAR = IN_PARKING;\r\n                    *rty_obstacle_detected = false;\r\n                    *rty_gear_state = P;\r\n                }\r\n                break;\r\n\r\n              case IN_PARKING:\r\n                *rty_obstacle_detected = false;\r\n                *rty_gear_state = P;\r\n                switch (rtu_operation)\r\n                {\r\n                  case REVERSE:\r\n                    localDW->is_GEAR = IN_REVERSE;\r\n                    *rty_gear_state = R;\r\n                    break;\r\n\r\n                  case DRIVING:\r\n                    localDW->is_GEAR = IN_DRIVING;\r\n                    *rty_gear_state = D;\r\n                    break;\r\n                }\r\n                break;\r\n\r\n              default:\r\n                /* case IN_REVERSE: */\r\n                *rty_gear_state = R;\r\n                if (rtu_operation == BRKING)\r\n                {\r\n                    localDW->is_GEAR = IN_BRAKE;\r\n                    *rty_gear_state = B;\r\n                }\r\n                else if ((rtu_r_distance <= 100U) && (rtu_r_distance > 10U))\r\n                {\r\n                    localDW->is_GEAR = IN_OBSTACLE_DETECTED;\r\n                    *rty_obstacle_detected = true;\r\n                }\r\n                break;\r\n            }\r\n\r\n            switch (localDW->is_DOOR)\r\n            {\r\n              case IN_DOOR_CLOSE:\r\n                *rty_isEnd = (rtu_isCloseComplete || (*rty_isEnd));\r\n                break;\r\n\r\n              case IN_DOOR_IDLE:\r\n                if ((localDW->is_GEAR == IN_PARKING) && rtu_isArrived &&\r\n                        (rtu_operationDoorState == OPEN))\r\n                {\r\n                    localDW->is_DOOR = IN_DOOR_OPEN;\r\n                }\r\n                break;\r\n\r\n              default:\r\n                /* case IN_DOOR_OPEN: */\r\n                if (rtu_isOpenComplete && (localDW->is_GEAR == IN_PARKING))\r\n                {\r\n                    *rty_door_state = OPENED;\r\n                    if (rtu_operationDoorState == CLOSE)\r\n                    {\r\n                        localDW->is_DOOR = IN_DOOR_CLOSE;\r\n                        *rty_isEnd = (rtu_isCloseComplete || (*rty_isEnd));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* End of Chart: '<Root>/Vehicle_State' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Vehicle_State_Controller.h","type":"header","group":"subsystem","path":"C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * Trial License - for use to evaluate programs for possible purchase as\r\n * an end-user only.\r\n *\r\n * File: Vehicle_State_Controller.h\r\n *\r\n * Code generated for Simulink model 'Vehicle_State0'.\r\n *\r\n * Model version                  : 1.66\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Fri Feb 28 12:13:35 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Infineon->TriCore\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Vehicle_State_Controller_h_\r\n#define Vehicle_State_Controller_h_\r\n#ifndef Vehicle_State0_COMMON_INCLUDES_\r\n#define Vehicle_State0_COMMON_INCLUDES_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#include \"math.h\"\r\n#endif                                 /* Vehicle_State0_COMMON_INCLUDES_ */\r\n\r\n#include \"Vehicle_State0_types.h\"\r\n\r\n/* Block signals and states (default storage) for system '<Root>/Vehicle_State' */\r\ntypedef struct\r\n{\r\n    uint8_t is_active_c2_Vehicle_State0;/* '<Root>/Vehicle_State' */\r\n    uint8_t is_c2_Vehicle_State0;      /* '<Root>/Vehicle_State' */\r\n    uint8_t is_GEAR;                   /* '<Root>/Vehicle_State' */\r\n    uint8_t is_DOOR;                   /* '<Root>/Vehicle_State' */\r\n}\r\nDW_State_Control;\r\n\r\nextern void State_Control_Init(bool *rty_isEnd, Vehicle_State *rty_vehicle_state,\r\n    Gear_State *rty_gear_state, bool *rty_obstacle_detected, Door_State\r\n    *rty_door_state);\r\nextern void State_Control(bool rtu_isStart, bool rtu_isArrived, OperationMode\r\n    rtu_operation, uint16_t rtu_left_speed, uint16_t rtu_right_speed, uint32_t\r\n    rtu_r_distance, uint32_t rtu_f_distance, OperationDoorState\r\n    rtu_operationDoorState, bool rtu_isOpenComplete, bool rtu_isCloseComplete,\r\n    bool *rty_isEnd, Vehicle_State *rty_vehicle_state, Gear_State\r\n    *rty_gear_state, bool *rty_obstacle_detected, Door_State *rty_door_state,\r\n    DW_State_Control *localDW);\r\n\r\n#endif                                 /* Vehicle_State_Controller_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"cm":{"GlobalVarInfo":[{"Name":"Vehicle_State0.c:rtM_","Size":4,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State0.c"],"IsStatic":true,"IsBitField":false,"IsExported":true,"UseCount":0,"Members":{"Name":"errorStatus","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":0,"Members":[],"UseInFunctions":[]},"UseInFunctions":[]},{"Name":"rtDW","Size":4,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State0.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":1,"Members":{"Name":"sf_Vehicle_State","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[{"Name":"is_active_c2_Vehicle_State0","File":26,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"is_c2_Vehicle_State0","File":26,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"is_GEAR","File":26,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"is_DOOR","File":26,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}}],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"rtU","Size":28,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State0.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":10,"Members":[{"Name":"isStart","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"isArrived","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"operation","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"left_speed","File":2,"Size":2,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"right_speed","File":2,"Size":2,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"r_distance","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"f_distance","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"operationDoorState","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"isOpenComplete","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}},{"Name":"isCloseComplete","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":1}}],"UseInFunctions":{"FunctionName":"Vehicle_State0_step","UseCount":10}},{"Name":"rtY","Size":20,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State0.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":10,"Members":[{"Name":"isEnd","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":2,"Members":[],"UseInFunctions":[{"FunctionName":"Vehicle_State0_step","UseCount":1},{"FunctionName":"Vehicle_State0_initialize","UseCount":1}]},{"Name":"vehicle_state","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":2,"Members":[],"UseInFunctions":[{"FunctionName":"Vehicle_State0_step","UseCount":1},{"FunctionName":"Vehicle_State0_initialize","UseCount":1}]},{"Name":"gear_state","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":2,"Members":[],"UseInFunctions":[{"FunctionName":"Vehicle_State0_step","UseCount":1},{"FunctionName":"Vehicle_State0_initialize","UseCount":1}]},{"Name":"obstacle_detected","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":2,"Members":[],"UseInFunctions":[{"FunctionName":"Vehicle_State0_step","UseCount":1},{"FunctionName":"Vehicle_State0_initialize","UseCount":1}]},{"Name":"door_state","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":2,"Members":[],"UseInFunctions":[{"FunctionName":"Vehicle_State0_step","UseCount":1},{"FunctionName":"Vehicle_State0_initialize","UseCount":1}]}],"UseInFunctions":[{"FunctionName":"Vehicle_State0_step","UseCount":5},{"FunctionName":"Vehicle_State0_initialize","UseCount":5}]}],"GlobalConstInfo":[],"FcnInfo":[{"Name":"State_Control","UniqueKey":"$State_Control","Idx":1,"NumCommentLines":5,"NumTotalLines":153,"NumCodeLines":129,"Callee":[],"Caller":{"Name":"Vehicle_State0_step","Weight":1},"Stack":48,"HasDefinition":1,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State_Controller.c"],"IsStatic":0,"Complexity":22,"StackTotal":48,"CalleeIdx":[]},{"Name":"State_Control_Init","UniqueKey":"$State_Control_Init","Idx":2,"NumCommentLines":0,"NumTotalLines":10,"NumCodeLines":5,"Callee":[],"Caller":{"Name":"Vehicle_State0_initialize","Weight":1},"Stack":20,"HasDefinition":1,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State_Controller.c"],"IsStatic":0,"Complexity":1,"StackTotal":20,"CalleeIdx":[]},{"Name":"Vehicle_State0_initialize","UniqueKey":"$Vehicle_State0_initialize","Idx":3,"NumCommentLines":7,"NumTotalLines":12,"NumCodeLines":2,"Callee":{"Name":"State_Control_Init","Weight":1},"Caller":[],"Stack":0,"HasDefinition":1,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State0.c"],"IsStatic":0,"Complexity":1,"StackTotal":20,"CalleeIdx":2},{"Name":"Vehicle_State0_step","UniqueKey":"$Vehicle_State0_step","Idx":4,"NumCommentLines":17,"NumTotalLines":26,"NumCodeLines":6,"Callee":{"Name":"State_Control","Weight":1},"Caller":[],"Stack":0,"HasDefinition":1,"File":["C:\\Users\\A\\Desktop\\stateflow_final\\Vehicle_State0_ert_rtw\\Vehicle_State0.c"],"IsStatic":0,"Complexity":1,"StackTotal":48,"CalleeIdx":1}]},"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};